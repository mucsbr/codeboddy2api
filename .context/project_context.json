{
  "project_overview": {
    "name": "CB2API工具调用中断修复项目",
    "description": "CB2API是一个CodeBuddy API代理系统，提供OpenAI兼容和Anthropic兼容的端点，具备账户管理、token轮换和API格式转换功能",
    "goals": [
      "提供OpenAI兼容和Anthropic兼容的API代理服务",
      "实现CodeBuddy账户token自动轮换机制",
      "修复工具调用中断导致的消息序列问题",
      "支持流式和非流式API响应"
    ],
    "architecture": {
      "type": "双服务架构",
      "main_service": {
        "port": 8000,
        "description": "主要的CodeBuddy API代理服务",
        "features": ["OpenAI兼容的chat completions", "CodeBuddy账户token轮换", "流式和非流式响应"]
      },
      "format_proxy": {
        "port": 8181,
        "description": "API格式转换代理",
        "features": ["OpenAI和Anthropic格式双向转换", "流式响应格式转换", "独立的格式处理服务"]
      }
    },
    "technology_stack": {
      "language": "Python",
      "frameworks": ["FastAPI", "httpx", "pydantic", "asyncio"],
      "dependencies": ["aiofiles", "tiktoken (可选)", "logging"],
      "data_storage": ["基于文件的配置系统"]
    }
  },
  "current_state": {
    "recently_implemented": {
      "tool_call_sequence_fix": {
        "description": "工具调用中断修复逻辑",
        "location": "PycharmProjects/cb2api/main.py",
        "function": "fix_tool_call_sequence",
        "status": "已完成",
        "details": "修复用户中断工具调用时导致的消息序列违反API规范问题"
      },
      "architecture_optimization": {
        "description": "移除format_proxy.py中的重复修复逻辑",
        "status": "已完成",
        "rationale": "遵循源头修复原则，避免重复处理"
      }
    },
    "work_in_progress": [],
    "known_issues": [
      {
        "type": "依赖警告",
        "description": "pydantic版本要求警告",
        "priority": "低"
      },
      {
        "type": "代码质量",
        "description": "存在代码重复片段",
        "priority": "中"
      }
    ],
    "performance_baselines": {
      "response_types": ["流式响应", "非流式响应"],
      "token_management": "自动恢复机制",
      "error_handling": "详细日志记录和异常处理"
    }
  },
  "design_decisions": {
    "tool_call_sequence_fix": {
      "decision": "只在main.py修复工具调用序列",
      "rationale": "源头修复原则 - 在数据源头处理问题，避免下游重复修复",
      "impact": "format_proxy.py接收的数据已经是修复后的，无需重复处理"
    },
    "message_reordering_strategy": {
      "decision": "通用消息重排策略",
      "approach": "不区分中断类型，统一处理所有插入的用户消息",
      "sequence": "tool_calls → tool_result → user_messages"
    },
    "api_compatibility": {
      "openai_format": "主要接口格式，支持chat completions",
      "anthropic_format": "通过format_proxy进行双向转换",
      "streaming": "支持两种格式的流式响应"
    },
    "configuration_management": {
      "approach": "基于文件的配置系统",
      "files": [
        "codebuddy_accounts.txt - 账户池管理",
        "models.json - 模型映射配置",
        "client.json - API密钥验证"
      ]
    }
  },
  "code_patterns": {
    "conventions": {
      "language": "中文注释和日志",
      "typing": "使用类型提示",
      "async_pattern": "async/await模式",
      "error_handling": "详细的异常捕获和日志记录"
    },
    "key_classes": {
      "ConfigManager": "配置管理类，处理账户、模型映射、API密钥",
      "TokenStatus": "Token状态管理类，跟踪可用性和错误计数"
    },
    "common_patterns": {
      "message_transformation": "消息格式转换函数",
      "token_rotation": "Round-robin token轮换机制",
      "streaming_response": "SSE格式的流式响应处理"
    },
    "testing_strategies": [
      "错误处理和日志记录用于调试",
      "频率限制自动处理",
      "Token有效性验证"
    ]
  },
  "agent_coordination": {
    "primary_agent": "通用助手",
    "tools_used": ["TodoWrite工具进行任务跟踪"],
    "successful_patterns": ["单一助手处理完整的问题分析和解决方案实现"],
    "key_findings": [
      "识别了工具调用中断导致的API序列问题",
      "设计了健壮的消息重排策略",
      "优化了代码架构避免重复修复逻辑"
    ],
    "dependencies": "无特殊跨助手依赖"
  },
  "technical_implementation": {
    "tool_call_sequence_fix": {
      "problem": "用户中断工具调用时，消息序列变成 tool_calls → user_interrupt → tool_result，违反API规范",
      "solution": "在main.py中实现fix_tool_call_sequence函数，重新排列为 tool_calls → tool_result → user_message",
      "core_logic": {
        "collection_phase": "收集tool_calls后的所有相关消息",
        "categorization": "区分tool_result和user消息",
        "reordering": "重新排列为符合API规范的顺序"
      },
      "robustness_features": [
        "工具调用ID验证和匹配",
        "处理部分工具调用完成的情况",
        "详细的日志记录用于调试",
        "保持消息完整性（不丢失任何消息）"
      ]
    },
    "message_processing_pipeline": {
      "step1": "fix_tool_call_sequence - 修复工具调用序列",
      "step2": "transform_messages - 转换system消息为user消息",
      "step3": "API格式转换和响应生成"
    }
  },
  "future_roadmap": {
    "planned_features": [
      "处理其他类型的消息序列问题",
      "增强的错误处理和监控",
      "性能优化和监控指标"
    ],
    "technical_debt": [
      {
        "item": "解决pydantic版本要求警告",
        "priority": "低"
      },
      {
        "item": "消除代码重复片段",
        "priority": "中"
      },
      {
        "item": "版本依赖更新和代码重构",
        "priority": "中"
      }
    ],
    "optimization_opportunities": [
      "优化token管理性能",
      "改进消息处理效率",
      "增强监控和指标收集"
    ]
  },
  "configuration_files": {
    "codebuddy_accounts.txt": {
      "format": "email|password|created_at|platform|access_token|refresh_token|token_expires|refresh_expires",
      "purpose": "CodeBuddy账户池管理"
    },
    "models.json": {
      "purpose": "模型映射配置",
      "content": "模型ID映射关系"
    },
    "client.json": {
      "purpose": "客户端API密钥验证",
      "content": "授权密钥列表"
    }
  },
  "api_endpoints": {
    "main_service_8000": {
      "POST /v1/chat/completions": "OpenAI兼容的聊天完成接口",
      "GET /v1/models": "列出可用模型",
      "GET /": "健康检查"
    },
    "format_proxy_8181": {
      "POST /v1/chat/completions": "OpenAI格式端点",
      "POST /v1/messages": "Anthropic格式端点",
      "POST /v1/messages/count_tokens": "Token计数（仅Anthropic）",
      "GET /v1/models": "模型列表",
      "GET /": "健康检查"
    }
  },
  "logging_and_monitoring": {
    "log_files": [
      "logs/main.log - 主服务日志",
      "logs/format_proxy.log - 格式代理日志",
      "codebuddy_proxy.log - 通用代理日志",
      "各种token管理日志（带时间戳）"
    ],
    "log_features": [
      "详细的请求追踪（request_id）",
      "工具调用序列修复日志",
      "Token轮换和错误处理日志",
      "API格式转换调试信息"
    ]
  },
  "context_metadata": {
    "created_at": "2025-09-16T01:47:00+08:00",
    "project_path": "PycharmProjects/cb2api",
    "key_files": [
      "PycharmProjects/cb2api/main.py",
      "PycharmProjects/cb2api/format_proxy.py",
      "PycharmProjects/cb2api/CLAUDE.md"
    ],
    "last_major_change": "工具调用中断修复功能实现",
    "completion_status": "核心功能已完成，处于维护和优化阶段"
  }
}